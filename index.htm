<!DOCTYPE html>
<html>

<head></head>

<body>SCORE:
<input id="lblScore" type="text"/>
<br/>
TIME:
<input id="lblTime" type="text"/>
<br/>
<canvas id="canvas" height="680" width="1400" style="border: 2px solid black;"></canvas>


<script type="text/javascript">
    var oMonster = new Image();
    var bMonster = new Image();
    var strawberry = new Image();
    var clock = new Image();
    oMonster.src = 'images/oMonster.jpg';
    bMonster.src = 'images/bMonster.jpg';
    strawberry.src = 'images/strawberry.JPG';
    clock.src = 'images/clock.PNG';

    var _monsters = [oMonster, bMonster];
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var _gameWidth = 1200;   //the game board width
    var _gameHeight = 600;    //the game board height
    var proportion = 30;    //cell size
    var pacmanShape = {};   //the object pacman
    var _foodCounter = 0;   //count the food in bard
    var currBoard;
    var score;
    var pac_color;
    var start_time;
    var time_elapsed;
    var intervalPacman;
    var m_currDirection = 4;
    var locatePacman = 0;
    var _beforeMonsterCell = [9, 9];
    var _monsterLastPosition = [[], []];    //save the monsters last positions


    var _lastPointsPositions = [];  //strewbbery last position
    var _beforePointsCell = 9;     //value of cell strewbbery last position
    var ui_totalFood = 20;         //user input number of points

    var ui_monsterSpeed = 2;       //user input for monster speed
    var _monsterSpeedControl = 0;
    var _pacmanLives = 3;
    var _strawberryGotEaten = false;

    //for the clock feature
    var _clockTimeRemaind = 100;
    var _randomUpdatesToShowClock;
    var _updatesCounter;


    Start();

    var gameBoard = [[]];

    function Start() {

        var points25 = Math.floor(ui_totalFood / (10 * ui_totalFood / 100));
        var points15 = Math.floor(ui_totalFood / (30 * ui_totalFood / 100));
        // var _points5= Math.floor(ui_totalFood/(60*ui_totalFood/100));
        var foodIntervals = Math.floor(288 / ui_totalFood);
        var constRemainder = 1.0 * (288 / ui_totalFood) - foodIntervals;
        var chngReminder = constRemainder;
        var blackCell = 0;
        var randomNum = Math.floor((Math.random() * 285 + 1));
        _randomUpdatesToShowClock = Math.floor((Math.random() *10 ));
        gameBoard = [
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        ];
        score = 0;
        pac_color = "yellow";
        currBoard = new Array(39);
        /*   var cnt = 800;
         var food_remain = 200;
         */
        var rand;
        var pacman_remain = 1;
        start_time = new Date();
        //create the board - pacman and food .
        for (var i = 0; i < _gameWidth / proportion - 1; i++) {
            currBoard[i] = new Array(19);
            for (var j = 0; j < _gameHeight / proportion - 1; j++) {
                //oreange monster
                rand = Math.random();

                if ((i === 0 && j === 0)) {
                    currBoard[i][j] = 5;
                    oMonster.i = i;
                    oMonster.j = j;
                    _monsterLastPosition[0] = [i, j];
                }
                //blue monster
                else if ((i === 38 && j === 18)) {
                    currBoard[i][j] = 6;
                    bMonster.i = i;
                    bMonster.j = j;
                    _monsterLastPosition[1] = [i, j];
                }
                //define strawberry
                else if ((i === 0 && j === 18)) {
                    currBoard[i][j] = 4;
                    strawberry.i = i;
                    strawberry.j = j;
                    _lastPointsPositions = [i, j];
                }
                //pacman
                else if (gameBoard[i][j] === 0) {
                    if (randomNum - 10 <= locatePacman && locatePacman <= randomNum + 10 && pacman_remain === 1 && (i != 0 && j != 0 ) && (i != 38 && j != 18 )) {
                        currBoard[i][j] = 2;
                        pacmanShape.i = i;
                        pacmanShape.j = j;
                        pacman_remain--;
                    }
                    if ((blackCell === (foodIntervals + Math.floor(chngReminder)))) {
                        if ((_foodCounter % points25) === 0) {
                            currBoard[i][j] = 25;

                        }
                        else if ((_foodCounter % points15) === 0) {
                            currBoard[i][j] = 15;
                        }
                        else {
                            currBoard[i][j] = 0.05;
                        }
                        if (chngReminder < 1)
                            chngReminder = chngReminder + constRemainder;
                        else {
                            chngReminder = chngReminder - 1.0;
                        }
                        blackCell = 0;
                        _foodCounter++;
                    }
                    else {
                        currBoard[i][j] = 9;
                    }
                    blackCell++;
                    locatePacman++;
                }
                else if (gameBoard[i][j] === 1) {
                    currBoard[i][j] = 1;
                }
            }
        }
        Draw();
        keysDown = {};
        addEventListener("keydown", function (e) {
            keysDown[e.keyCode] = true;
        }, false);
        addEventListener("keyup", function (e) {
            keysDown[e.keyCode] = false;
        }, false);
        //intervalMonsters = setInterval(updateMonsterPosition,300);
        intervalPacman = setInterval(UpdatePosition, 100);
    }


    function drawPacmanMaze() {
        var padding = 22;
        var thickness = 5;
        //maze frame

        context.beginPath();
        //top
        context.moveTo(20, 290);

        context.lineTo(45 - padding + 300, 290);
        context.lineTo(45 - padding + 300, 220);
        context.lineTo(45 - padding, 220);
        context.lineTo(45 - padding, padding);

        context.lineTo(1230 - padding, padding);
        context.lineTo(1230 - padding, 220);
        context.lineTo(1230 - padding - 300, 220);
        context.lineTo(1230 - padding - 300, 290);
        context.lineTo(1230 - padding, 290);
        //button
        context.moveTo(1230 - padding, 340);
        context.lineTo(1230 - padding - 300, 340);
        context.lineTo(1230 - padding - 300, 410);
        context.lineTo(1230 - padding, 410);
        context.lineTo(1230 - padding, 630 - padding);
        context.lineTo(1230 - padding - 585, 630 - padding);
        context.lineTo(1230 - padding - 585, 630 - padding - 242);
        context.lineTo(1230 - padding - 600, 630 - padding - 242);
        context.lineTo(1230 - padding - 600, 630 - padding);
        context.lineTo(45 - padding, 630 - padding);

        context.lineTo(45 - padding, 630 - padding);
        context.lineTo(45 - padding, 410);
        context.lineTo(45 - padding + 300, 410);
        context.lineTo(45 - padding + 300, 340);
        context.lineTo(45 - padding, 340);

        context.lineWidth = thickness;
        context.lineJoin = "bevel";
        context.lineCap = "butt";
        context.strokeStyle = "blue";
        context.stroke()

        //shapes in maze
        var paddingShapes = 15;
        //squre on the cells
        context.beginPath();
        context.strokeStyle = "blue";
        context.lineWidth = thickness;
        //corner rec
        context.strokeRect(70, 70, 220, 100);
        context.strokeRect(70, 460, 220, 100);
        context.strokeRect(940, 70, 220, 100);
        context.strokeRect(940, 460, 220, 100);

        //center
        context.strokeRect(370, 220, 490, 100);

        //top thin rec
        context.strokeRect(340, 70, 550, 40);
        context.strokeRect(340, 160, 550, 10);

        //small bottom
        context.strokeRect(370, 370, 190, 40);
        context.strokeRect(670, 370, 190, 40);

        context.strokeRect(340, 460, 40, 100);
        context.strokeRect(430, 460, 40, 100);
        context.strokeRect(520, 460, 40, 50);
        context.strokeRect(520, 550, 40, 10);

        context.strokeRect(670, 460, 40, 50);
        context.strokeRect(670, 550, 40, 10);
        context.strokeRect(760, 460, 40, 100);
        context.strokeRect(850, 460, 40, 100);


    }

    function GetKeyPressed() {
        if (keysDown[38]) {
            return 1;
        }
        if (keysDown[39]) {
            return 4;
        }
        if (keysDown[40]) {
            return 3;
        }
        if (keysDown[37]) {
            return 2;
        }
    }

    function Draw() {
        canvas.width = canvas.width; //clean board
        lblScore.value = score;
        lblTime.value = time_elapsed;
        context.fillStyle = "black";
        context.fillRect(0, 0, canvas.width, canvas.height);
        drawPacmanMaze();
        var randomNum = Math.floor((Math.random() * 285 + 1));
        var clockposition =0;
        for (var i = 0; i < _gameWidth / proportion - 1; i++) {
            for (var j = 0; j < _gameHeight / proportion - 1; j++) {

                var center = new Object();
                center.x = i * proportion + 45;
                center.y = j * proportion + 45;
                if (currBoard[i][j] === 2) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, (0.15 - (m_currDirection) / 2) * Math.PI, (1.85 - (m_currDirection) / 2) * Math.PI); // half circle
                    context.lineTo(center.x, center.y);
                    context.fillStyle = pac_color; //color
                    context.fill();
                    context.beginPath();
                    setPacmanEye(center.x, center.y);
                    context.fillStyle = "black"; //color
                    context.fill();
                }
                else if (currBoard[i][j] === 25) {  //regular point
                    context.beginPath();
                    pointRadius=12.5;
                    context.arc(center.x, center.y, 12.5, 0, 2 * Math.PI); // circle
                    context.fillStyle = "red"; //color
                    context.closePath();
                    context.fill();
                    context.font = "10px Comic Sans MS";
                    context.fillStyle = "black";
                    context.textAlign = "center";
                    context.fillText("25", center.x, center.y + 4);
                }
                else if (currBoard[i][j] === 15) {  //regular point
                    context.beginPath();
                    context.arc(center.x, center.y, 10, 0, 2 * Math.PI); // circle
                    context.fillStyle = "green"; //color
                    context.closePath();
                    context.fill();
                    context.font = "10px Comic Sans MS";
                    context.fillStyle = "black";
                    context.textAlign = "center";
                    context.fillText("15", center.x, center.y + 4);
                }
                else if (currBoard[i][j] === 0.05) {  //regular point
                    context.beginPath();
                    context.arc(center.x, center.y, 7.5, 0, 2 * Math.PI); // circle
                    context.fillStyle = "yellow"; //color
                    context.closePath();
                    context.fill();
                    context.font = "10px Comic Sans MS";
                    context.fillStyle = "black";
                    context.textAlign = "center";
                    context.fillText("5", center.x, center.y + 4);
                }
                else if (currBoard[i][j] === 5) {

                    context.drawImage(oMonster, i * 30 + 30, j * 30 + 30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }
                else if (currBoard[i][j] == 6) {
                    context.drawImage(bMonster, i * 30 + 30, j * 30 + 30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }
                else if (currBoard[i][j] == 4) {
                    context.drawImage(strawberry, i * 30 + 30, j * 30 + 30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }
                else if(toDrawClock() && randomNum - 10 <= clockposition && clockposition <= randomNum + 10){
                    context.drawImage(clock, i * 30 + 30, j * 30 + 30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }

                clockposition++;
            }
        }

    }

    function toDrawClock(){
        if(_randomUpdatesToShowClock>=_updatesCounter && _randomUpdatesToShowClock+_clockTimeRemaind<_updatesCounter)
        {
            return true;
        }
        else if(_randomUpdatesToShowClock+_clockTimeRemaind===_updatesCounter)
        {
            _randomUpdatesToShowClock+=_randomUpdatesToShowClock;
        }
        return false;
    }

    function setPacmanEye(centerX, centerY) {
        var radiudSize = 3;
        var eyeOffSet1 = 10;
        var eyeOffSet2 = 3.5
        if (m_currDirection == 1) {
            context.arc(centerX + eyeOffSet1, centerY - eyeOffSet2, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 2) {
            context.arc(centerX - eyeOffSet2, centerY - eyeOffSet1, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 3) {
            context.arc(centerX - eyeOffSet1, centerY + eyeOffSet2, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 4) {
            context.arc(centerX + eyeOffSet2, centerY - eyeOffSet1, radiudSize, 0, 2 * Math.PI);
        }

    }

    function UpdatePosition() {
        currBoard[pacmanShape.i][pacmanShape.j] = 9;
        var x = GetKeyPressed();
        if (GetKeyPressed() != null) {
            m_currDirection = x;
        }

        if (x == 1) {
            if (pacmanShape.j > 0 && currBoard[pacmanShape.i][pacmanShape.j - 1] !== 1) {
                pacmanShape.j--;
            }
        }
        if (x == 3) {
            if (pacmanShape.j < (_gameHeight / proportion) - 2 && currBoard[pacmanShape.i][pacmanShape.j + 1] !== 1) {
                pacmanShape.j++;
            }
        }
        if (x == 2) {
            if (pacmanShape.i === 0 && pacmanShape.j === 9) {
                pacmanShape.i = 38;
                pacmanShape.j = 9;
            }
            else if (pacmanShape.i > 0 && currBoard[pacmanShape.i - 1][pacmanShape.j] !== 1) {
                pacmanShape.i--;
            }
        }
        if (x == 4) {
            if (pacmanShape.i === 38 && pacmanShape.j === 9) {
                pacmanShape.i = 0;
                pacmanShape.j = 9;
            }
            else if (pacmanShape.i < (_gameWidth / proportion) - 2 && currBoard[pacmanShape.i + 1][pacmanShape.j] !== 1) {
                pacmanShape.i++;
            }
        }
        var pointCollected = isPoints(pacmanShape.i,pacmanShape.j)
        if (pointCollected!==-1) {
            score+=pointCollected;
            _foodCounter--;
        }


        //controll the speed of the monsters.
        if ((_monsterSpeedControl % ui_monsterSpeed ) === 0) {
            if (monsterEatPacman()) {//if the monster catch the pacmam in her interval.
                Draw();
                window.clearInterval(intervalPacman);
                window.alert("one chance");
            }
            updateMonsterPosition();
        }
        _monsterSpeedControl++;

        //update strewberry position
        if (!_strawberryGotEaten && _monsterSpeedControl % ui_monsterSpeed === 0) {
            updatePointsPosition();
        }
        //time
        var currentTime = new Date();
        time_elapsed = (currentTime - start_time) / 1000;
        if (score >= 20 && time_elapsed <= 10) {
            pac_color = "green";
        }

        if (_foodCounter === 0) {
            window.clearInterval(intervalPacman);
            window.alert("Game completed");
        }
        //collosion pacmen and goast
        else if (monsterEatPacman()) {
            Draw();
            window.clearInterval(intervalPacman);
            window.alert("one chance");
        }
        else if (!_strawberryGotEaten && pacmanGetStrawberry()) {
            //here made special sound..
            Draw();
            score = score + 50;
        }
        else {
            currBoard[pacmanShape.i][pacmanShape.j] = 2;
            Draw();
        }
        _updatesCounter++;
    }

    function pacmanGetStrawberry() {
        if (pacmanShape.i === strawberry.i && pacmanShape.j === strawberry.j) {
            _strawberryGotEaten = true;
            currBoard[strawberry.i][strawberry.j] = 2;
        }
        return _strawberryGotEaten;
    }

    function monsterEatPacman() {
        for (var i = 0; i < _monsters.length; i++) {
            var monster = _monsters[i];
            if (pacmanShape.i === monster.i && pacmanShape.j === monster.j)
                return true;
        }
        return false;
    }

    function updateMonsterPosition() {


        for (var i = 0; i < _monsters.length; i++) {
            var monster = _monsters[i];
            currBoard[monster.i][monster.j] = _beforeMonsterCell[i];

            var next_monster_i = monster.i;
            var next_monster_j = monster.j;
            //go from side to side
            if (monster.i === 0 && monster.j === 9 && !(_monsterLastPosition[i][0] === 38)) {
                next_monster_i = 38;
            }
            else if (monster.i === 38 && monster.j === 9 && !(_monsterLastPosition[i][0] === 0)) {
                next_monster_i = 0;
            }
            else if (Math.abs(monster.i - pacmanShape.i) === 0) {
                if (pacmanShape.j < monster.j) {
                    next_monster_j--;
                }
                else  {
                    next_monster_j++;
                }
            }
            else if (Math.abs(monster.j - pacmanShape.j) === 0) {
                if (pacmanShape.i < monster.i )
                    next_monster_i--;
                else
                    next_monster_i++;
            }
            else if (Math.abs(monster.i - pacmanShape.i) < Math.abs(monster.j - pacmanShape.j)) {
                if (pacmanShape.i < monster.i)
                    next_monster_i--;
                else
                    next_monster_i++;
            }
            else {
                if (pacmanShape.j < monster.j)
                    next_monster_j--;
                else
                    next_monster_j++;
            }
            if (!isLegalPosition(next_monster_i, next_monster_j, i)) //monster new cordinate is not legal
            {
                goDefault(monster, i);
                next_monster_i = monster.i;
                next_monster_j = monster.j;
            }
            else {//only if not update in default function, update last location anyway
                _monsterLastPosition[i][0] = monster.i;
                _monsterLastPosition[i][1] = monster.j;
            }
            //if collosion
            if(currBoard[next_monster_i][next_monster_j]===5 || currBoard[next_monster_i][next_monster_j]===6 || currBoard[next_monster_i][next_monster_j]===7)
            {
                swapMonsters(i,currBoard[next_monster_i][next_monster_j]-5);
                next_monster_i = monster.i;
                next_monster_j = monster.j;
            }

            _beforeMonsterCell[i] = currBoard[next_monster_i][next_monster_j];
            currBoard[next_monster_i][next_monster_j] = 5 + i;
            monster.i = next_monster_i;
            monster.j = next_monster_j;
        }
    }

    function swapMonsters(monsterIndex1,monsterIndex2) {
        var _i_loc = _monsters[monsterIndex1].i;
        var  j_loc = _monsters[monsterIndex1].j;
        _monsters[monsterIndex1].i=_monsters[monsterIndex2].i;
        _monsters[monsterIndex1].j=_monsters[monsterIndex2].j;
        _monsters[monsterIndex2].i=_i_loc;
        _monsters[monsterIndex2].j=j_loc;
        return monsterIndex2;
    }

    function isLegalPosition(i, j, monsIndex) {

        return (isPath(i,j) && !(i === _monsterLastPosition[monsIndex][0] &&
        j === _monsterLastPosition[monsIndex][1]) || (i === 0 && j === 9) || (i === 38 && j === 9));

    }
    function goDefault(monster, monsIndex) {

        //never go to last position!
            //go right
            if (monster.i < (_gameWidth / proportion) - 2 && isLegalPosition(monster.i + 1, monster.j, monsIndex)) {
                _monsterLastPosition[monsIndex][0] = monster.i;
                monster.i++;
                return;
            }
            //go down
            if (monster.j < (_gameHeight / proportion) - 2 && isLegalPosition(monster.i, monster.j + 1, monsIndex)) {
                _monsterLastPosition[monsIndex][1] = monster.j;
                monster.j++;
                return;
            }
            //go left
            if (monster.i > 0 && isLegalPosition(monster.i - 1, monster.j, monsIndex)) {
                _monsterLastPosition[monsIndex][0] = monster.i;
                monster.i--;
                return;
            }
            //go up
            if (monster.j > 0 && isLegalPosition(monster.i, monster.j - 1, monsIndex)) {
                _monsterLastPosition[monsIndex][1] = monster.j;
                monster.j--;
                return;

        }
    }
    function updatePointsPosition() {
        currBoard[strawberry.i][strawberry.j] = _beforePointsCell;

        var right = [strawberry.i + 1, strawberry.j];

        var left = [strawberry.i - 1, strawberry.j];

        var up = [strawberry.i, strawberry.j - 1];

        var down = [strawberry.i, strawberry.j + 1];

        var arrLegalMoves = [];

        // collect to arr all possible moves
        if (right[0] <= (_gameWidth / proportion) - 2 && (currBoard[right[0]][right[1]] === 0 || currBoard[right[0]][right[1]] === 9)
            && !(_lastPointsPositions[0] === right[0] && _lastPointsPositions[1] === right[1])) {
            arrLegalMoves.push(right);
        }
        if (left[0] >= 0)
            if ((currBoard[left[0]][left[1]] === 0 || currBoard[left[0]][left[1]] === 9)
                && !(_lastPointsPositions[0] === left[0] && _lastPointsPositions[1] === left[1])) {
                arrLegalMoves.push(left);
            }
        if (up[1] >= 0 && (currBoard[up[0]][up[1]] === 0 || currBoard[up[0]][up[1]] === 9)
            && !(_lastPointsPositions[0] === up[0] && _lastPointsPositions[1] === up[1])) {
            arrLegalMoves.push(up);
        }
        if (down[1] <= (_gameHeight / proportion) - 2 && (currBoard[down[0]][down[1]] === 0 || currBoard[down[0]][down[1]] === 9)
            && !(_lastPointsPositions[0] === down[0] && _lastPointsPositions[1] === down[1])) {
            arrLegalMoves.push(down);
        }
        //choose random move from the legals
        var len = arrLegalMoves.length;
        var rand = Math.floor((Math.random() * len));
        _lastPointsPositions[0] = strawberry.i;
        _lastPointsPositions[1] = strawberry.j;
        //move the points there
        strawberry.i = arrLegalMoves[rand][0];
        strawberry.j = arrLegalMoves[rand][1];
        //save the last location
        _beforePointsCell = currBoard[strawberry.i][strawberry.j];

        //update the boeard acordingli
        if(pacmanGetStrawberry())
        {
            currBoard[pacmanShape.i][pacmanShape.j] = 2;
            score=score+50;
            return;
        }
        currBoard[strawberry.i][strawberry.j] = 4;

    }

    function isPath ( i,  j){

        if (
            (currBoard[i][j]===25 ||
            currBoard[i][j]===15 ||
            currBoard[i][j]===0.05 ||
            currBoard[i][j]===9) )
            return true;
        else
            return false;
    }
    function isPoints( i,  j){
        if (currBoard[i][j]===25)
            return 25;
        else if(currBoard[i][j]===15)
            return 15;
        else if(currBoard[i][j]===0.05)
            return 5;
        else return -1;

    }


</script>
</body>

</html>