<!DOCTYPE html>
<html>

<head></head>

<body>SCORE:
<input id="lblScore" type="text"/>
<br/>
TIME:
<input id="lblTime" type="text"/>
<br/>
<canvas id="canvas" height="680" width="1400" style="border: 2px solid black;"></canvas>


<script type="text/javascript">
    var oMonster = new Image();
    var bMonster = new Image();
    oMonster.src = 'images/oMonster.jpg';
    bMonster.src = 'images/bMonster.jpg';
    var _monsters = [oMonster, bMonster];
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var _gameWidth = 1200;
    var _gameHeight = 600;
    var proportion = 30;
    var pacmanShape = {};
    var currBoard;
    var score;
    var pac_color;
    var start_time;
    var time_elapsed;
    var intervalPacman;
    var intervalMonsters;
    var m_currDirection = 4;
    var _foodCounter;
    var _beforeMonsterCell = [0,0];
    var _monsterLastPosition = [[],[]];
    var isSwapOtherSide = false;



    Start();

    var gameBoard = [[]];

    function Start() {

        gameBoard = [
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        ];
        score = 0;
        pac_color = "yellow";
        currBoard = new Array(39);
        /*   var cnt = 800;
         var food_remain = 200;
         */
        var pacman_remain = 1;
        start_time = new Date();
        //create the board - pacman and food .
        for (var i = 0; i < _gameWidth / proportion - 1; i++) {
            currBoard[i] = new Array(19);
            for (var j = 0; j < _gameHeight / proportion - 1; j++) {
                var randomNum = Math.random();
                if ((i === 0 && j === 0)) {
                    currBoard[i][j] = 5;
                    oMonster.i = i;
                    oMonster.j = j;
                    _monsterLastPosition[0] = [i,j];
                }
                else if ((i === 38 && j === 18)) {
                    currBoard[i][j] = 6;
                    bMonster.i = i;
                    bMonster.j = j;
                    _monsterLastPosition[1] = [i,j];
                }
                else if (gameBoard[i][j] === 0) {
                    if (i===10 && j===5 && pacman_remain === 1) {
                        currBoard[i][j] = 2;
                        pacmanShape.i = i;
                        pacmanShape.j = j;
                        pacman_remain--;
                    }
                    else {
                        _foodCounter++;
                        currBoard[i][j] = 0;
                    }
                }
                else if (gameBoard[i][j] === 1) {
                    currBoard[i][j] = 1;
                }
            }
        }
        keysDown = {};
        addEventListener("keydown", function (e) {
            keysDown[e.keyCode] = true;
        }, false);
        addEventListener("keyup", function (e) {
            keysDown[e.keyCode] = false;
        }, false);
        intervalPacman = setInterval(UpdatePosition, 150);
        intervalMonsters = setInterval(updateMonsterPosition,300);
    }


    function drawPacmanMaze() {
        var padding = 22;
        var thickness = 5;
        //maze frame

        context.beginPath();
        //top
        context.moveTo(20, 290);

        context.lineTo(45 - padding + 300, 290);
        context.lineTo(45 - padding + 300, 220);
        context.lineTo(45 - padding, 220);
        context.lineTo(45 - padding, padding);

        context.lineTo(1230 - padding, padding);
        context.lineTo(1230 - padding, 220);
        context.lineTo(1230 - padding - 300, 220);
        context.lineTo(1230 - padding - 300, 290);
        context.lineTo(1230 - padding, 290);
        //button
        context.moveTo(1230 - padding, 340);
        context.lineTo(1230 - padding - 300, 340);
        context.lineTo(1230 - padding - 300, 410);
        context.lineTo(1230 - padding, 410);
        context.lineTo(1230 - padding, 630 - padding);
        context.lineTo(1230 - padding - 585, 630 - padding);
        context.lineTo(1230 - padding - 585, 630 - padding - 242);
        context.lineTo(1230 - padding - 600, 630 - padding - 242);
        context.lineTo(1230 - padding - 600, 630 - padding);
        context.lineTo(45 - padding, 630 - padding);

        context.lineTo(45 - padding, 630 - padding);
        context.lineTo(45 - padding, 410);
        context.lineTo(45 - padding + 300, 410);
        context.lineTo(45 - padding + 300, 340);
        context.lineTo(45 - padding, 340);

        context.lineWidth = thickness;
        context.lineJoin = "bevel";
        context.lineCap = "butt";
        context.strokeStyle = "blue";
        context.stroke()

        //shapes in maze
        var paddingShapes = 15;
        //squre on the cells
        context.beginPath();
        context.strokeStyle = "blue";
        context.lineWidth = thickness;
        //corner rec
        context.strokeRect(70, 70, 220, 100);
        context.strokeRect(70, 460, 220, 100);
        context.strokeRect(940, 70, 220, 100);
        context.strokeRect(940, 460, 220, 100);

        //center
        context.strokeRect(370, 220, 490, 100);

        //top thin rec
        context.strokeRect(340, 70, 550, 40);
        context.strokeRect(340, 160, 550, 10);

        //small bottom
        context.strokeRect(370, 370, 190, 40);
        context.strokeRect(670, 370, 190, 40);

        context.strokeRect(340, 460, 40, 100);
        context.strokeRect(430, 460, 40, 100);
        context.strokeRect(520, 460, 40, 50);
        context.strokeRect(520, 550, 40, 10);

        context.strokeRect(670, 460, 40, 50);
        context.strokeRect(670, 550, 40, 10);
        context.strokeRect(760, 460, 40, 100);
        context.strokeRect(850, 460, 40, 100);


    }

    function GetKeyPressed() {
        if (keysDown[38]) {
            return 1;
        }
        if (keysDown[39]) {
            return 4;
        }
        if (keysDown[40]) {
            return 3;
        }
        if (keysDown[37]) {
            return 2;
        }
    }
    function Draw() {
        canvas.width = canvas.width; //clean board
        lblScore.value = score;
        lblTime.value = time_elapsed;
        context.fillStyle = "black";
        context.fillRect(0, 0, canvas.width, canvas.height);
        drawPacmanMaze();
        for (var i = 0; i < _gameWidth / proportion - 1; i++) {
            for (var j = 0; j < _gameHeight / proportion - 1; j++) {
                var center = new Object();
                center.x = i * proportion + 45;
                center.y = j * proportion + 45;
                if (currBoard[i][j] == 2) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, (0.15 - (m_currDirection) / 2) * Math.PI, (1.85 - (m_currDirection) / 2) * Math.PI); // half circle
                    context.lineTo(center.x, center.y);
                    context.fillStyle = pac_color; //color
                    context.fill();
                    context.beginPath();
                    setPacmanEye(center.x, center.y);
                    context.fillStyle = "black"; //color
                    context.fill();
                } else if (currBoard[i][j] == 0) {  //regular point
                    context.beginPath();
                    context.arc(center.x, center.y, 5, 0, 2 * Math.PI); // circle
                    context.fillStyle = "yellow"; //color
                    context.closePath();
                    context.fill();
                    context.font = "10px Comic Sans MS";
                    context.fillStyle = "yellow";
                    context.textAlign = "center";
                    context.fillText("5", center.x, center.y + 4);
                }
                else if (currBoard[i][j] == 4) {//wall
                    context.beginPath();
                    context.rect(center.x - 15, center.y - 15, 20, 30);
                    context.fillStyle = "blue";
                    context.fill();

                }
                else if (currBoard[i][j] == 5) {

                    context.drawImage(oMonster, i * 30+30, j * 30+30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }
                else if (currBoard[i][j] == 6) {
                    context.drawImage(bMonster, i * 30 + 30, j * 30 + 30, (_gameWidth / proportion) - 10, _gameHeight / proportion + 10);
                }


            }
        }


    }

    function setPacmanEye(centerX, centerY) {
        var radiudSize = 3;
        var eyeOffSet1 = 10;
        var eyeOffSet2 = 3.5
        if (m_currDirection == 1) {
            context.arc(centerX + eyeOffSet1, centerY - eyeOffSet2, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 2) {
            context.arc(centerX - eyeOffSet2, centerY - eyeOffSet1, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 3) {
            context.arc(centerX - eyeOffSet1, centerY + eyeOffSet2, radiudSize, 0, 2 * Math.PI);
        }
        if (m_currDirection == 4) {
            context.arc(centerX + eyeOffSet2, centerY - eyeOffSet1, radiudSize, 0, 2 * Math.PI);
        }

    }

    function UpdatePosition() {
        currBoard[pacmanShape.i][pacmanShape.j] = 9;
        var x = GetKeyPressed();
        if (GetKeyPressed() != null) {
            m_currDirection = x;
        }

        if (x == 1) {
            if (pacmanShape.j > 0 && currBoard[pacmanShape.i][pacmanShape.j - 1] !== 1) {
                pacmanShape.j--;
            }
        }
        if (x == 3) {
            if (pacmanShape.j < (_gameHeight / proportion) - 2 && currBoard[pacmanShape.i][pacmanShape.j + 1] !== 1) {
                pacmanShape.j++;
            }
        }
        if (x == 2) {
            if(pacmanShape.i===0 && pacmanShape.j===9)
            {
                pacmanShape.i=38;
                pacmanShape.j=9;
            }
            else if (pacmanShape.i > 0 && currBoard[pacmanShape.i - 1][pacmanShape.j] !== 1) {
                pacmanShape.i--;
            }
        }
        if (x == 4) {
            if(pacmanShape.i===38 && pacmanShape.j===9)
            {
                pacmanShape.i=0;
                pacmanShape.j=9;
            }
            else if (pacmanShape.i < (_gameWidth / proportion) - 2 && currBoard[pacmanShape.i + 1][pacmanShape.j] !== 1) {
                pacmanShape.i++;
            }
        }
        if (currBoard[pacmanShape.i][pacmanShape.j] === 0) {
            score++;
            _foodCounter--;
        }
        currBoard[pacmanShape.i][pacmanShape.j] = 2;

        var currentTime = new Date();
        time_elapsed = (currentTime - start_time) / 1000;
        if (score >= 20 && time_elapsed <= 10) {
            pac_color = "green";
        }
        if (_foodCounter === 1) {
            window.clearInterval(intervalPacman);
            window.alert("Game completed");
        }
        else {
            Draw();
        }
    }

    function updateMonsterPosition() {
        for (var i = 0; i < _monsters.length; i++) {
            var monster = _monsters[i];
            currBoard[monster.i][monster.j] = _beforeMonsterCell[i];

            var next_monster_i = monster.i;
            var next_monster_j = monster.j;
            //go from side to side
            if(monster.i===0 && monster.j===9 && !(_monsterLastPosition[i][0]===38))
            {
                next_monster_i=38;

            }
            else if(monster.i===38 && monster.j===9 && !(_monsterLastPosition[i][0]===0))
            {
                next_monster_i=0;
            }
            else if (Math.abs(monster.i - pacmanShape.i) === 0) {
                if (pacmanShape.j < monster.j) {
                    next_monster_j--;
                }
                else {
                    next_monster_j++;
                }
            }
            else if (Math.abs(monster.j - pacmanShape.j) === 0) {
                if (pacmanShape.i < monster.i)
                    next_monster_i--;
                else
                    next_monster_i++;
            }
            else if (Math.abs(monster.i - pacmanShape.i) < Math.abs(monster.j - pacmanShape.j)) {
                if (pacmanShape.i < monster.i)
                    next_monster_i--;
                else
                    next_monster_i++;
            }
            else {
                if (pacmanShape.j < monster.j)
                    next_monster_j--;
                else
                    next_monster_j++;
            }
            if (!isLegalPosition(next_monster_i,next_monster_j,i)) //monster new cordinate is not legal
            {
                goDefault(monster,i);
                next_monster_i = monster.i;
                next_monster_j = monster.j;
            }
            else
            {
                _monsterLastPosition[i][0] = monster.i;
                _monsterLastPosition[i][1] = monster.j;
            }
            _beforeMonsterCell[i] = currBoard[next_monster_i][next_monster_j];
            currBoard[next_monster_i][next_monster_j] = 5 + i;

            monster.i = next_monster_i;
            monster.j = next_monster_j;

        }
    }

    function isLegalPosition(i,j,monsIndex) {
        return (currBoard[i][j]!==1 && !(i === _monsterLastPosition[monsIndex][0] &&
                                        j === _monsterLastPosition[monsIndex][1]) || (i===0 && j===9) || (i===38 && j===9));

    }
        function goDefault(monster,monsIndex) {

            while(true)
            {//never go to last position!
                //go right
                if(monster.i < (_gameWidth / proportion) - 2 && isLegalPosition(monster.i+1,monster.j,monsIndex)) {
                    _monsterLastPosition[monsIndex][0]=monster.i;
                    monster.i++;
                    return;
                }
                //go down
                if(monster.j < (_gameHeight / proportion) - 2 && isLegalPosition(monster.i,monster.j+1,monsIndex)){
                    _monsterLastPosition[monsIndex][1]=monster.j;
                    monster.j++;
                    return;
                }
                //go left
                if(monster.i > 0 && isLegalPosition(monster.i-1,monster.j,monsIndex)){
                    _monsterLastPosition[monsIndex][0]=monster.i;
                    monster.i--;
                    return;
                }
                //go up
                if(monster.j>0 && isLegalPosition(monster.i,monster.j-1,monsIndex)){
                    _monsterLastPosition[monsIndex][1]=monster.j;
                    monster.j--;
                    return;
                }
            }
        }


</script>
</body>

</html>